on:
  push:
    paths:
      - 'version/naive-client.txt'

name: naive-client
jobs:
  build:
    strategy:
      matrix:
        cpu: [x86, x64, arm, arm64]
      fail-fast: false

    runs-on: ubuntu-18.04
    env:
      EXTRA_FLAGS: target_cpu="${{ matrix.cpu }}"
    steps:

      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Set variables
        run: |
          echo "VERSION=$(cat "version/naive-client.txt" | head -n1 | tr -d [:space:])" >> $GITHUB_ENV
        shell: bash

      - name: Build
        run: |
          sudo apt update
          sudo apt install -y git curl unzip ccache python-minimal ninja-build qemu-user pkg-config libnss3-dev
          NAIVE=$(wget -qO- https://api.github.com/repos/klzgrad/naiveproxy/tags | grep 'name' | cut -d\" -f4 | head -1)
          git clone -b ${NAIVE} https://github.com/klzgrad/naiveproxy.git
          pushd naiveproxy/src || exit 1
          chmod +x *.sh
          ./get-clang.sh
          ./build.sh
          popd || exit 1

      - name: Ready to release
        run: |
          mkdir -p release
          case ${{ matrix.cpu }} in
            x86)
              mv naiveproxy/src/out/Release/naive release/naive-linux-386
              ;;
            x64)
              mv naiveproxy/src/out/Release/naive release/naive-linux-amd64
              ;;
            arm)
              mv naiveproxy/src/out/Release/naive release/naive-linux-arm32-v7
              ;;
            arm64)
              mv naiveproxy/src/out/Release/naive release/naive-linux-arm64
              ;;
            *)
              echo "Error occured" && exit 1
              ;;
          esac

      - name: Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: ${{ env.VERSION }}
          tag_name: ${{ env.VERSION }}
          draft: false
          prerelease: false
          files: |
            ./release/*

  push:
    needs: build
    runs-on: ubuntu-20.04
    steps:

      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Set variables
        run: |
          echo "VERSION=$(cat "version/naive-client.txt" | head -n1 | tr -d [:space:])" >> $GITHUB_ENV
        shell: bash

      - name: Get Dockerfile
        run: |
          cp src/naive-client/* $PWD
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1.1.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Login to DockerHub
        uses: docker/login-action@v1.9.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build latest
        uses: docker/build-push-action@v2
        with:
          context: .
          platforms: linux/386,linux/amd64,linux/arm/v7,linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/naiveproxy:client
            ${{ secrets.DOCKER_USERNAME }}/naiveproxy:${{ env.VERSION }}
           
  test:
     needs: [build,push]
     runs-on: ubuntu-20.04
     steps:
       
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Setup variables
        run: |
          echo "VERSION=$(cat "version/naive-client.txt" | head -n1 | tr -d [:space:])" >> $GITHUB_ENV
        shell: bash

      - name: Test Docker image
        run: |
          docker run --rm --entrypoint /usr/bin/naive ${{ secrets.DOCKER_USERNAME }}/naiveproxy:client --version
          docker run --rm --entrypoint /usr/bin/naive ${{ secrets.DOCKER_USERNAME }}/naiveproxy:${{ env.VERSION }} --version

  backup:
      runs-on: ubuntu-20.04
      steps:

        - name: Checkout
          uses: actions/checkout@v2

        - name: Set variables
          run: |
            echo "TAGS=$(wget -qO- https://api.github.com/repos/klzgrad/naiveproxy/tags | grep 'name' | cut -d\" -f4 | head -1)" >> $GITHUB_ENV
          shell: bash

        - name: Start backup
          run: |
            wget -qO- https://api.github.com/repos/klzgrad/naiveproxy/releases/tags/${{ env.TAGS }} | jq ".assets[] | {browser_download_url}" -c | jq .browser_download_url -r | wget -i -
            mkdir -p release && mv naiveproxy-* release && tar -zvcf release.tar.gz release

        - name: Release
          uses: actions/upload-artifact@v2
          with:
            name: ${{ env.TAGS }}
            path: release.tar.gz